# -*- coding: utf-8 -*-
"""Command output processor.

This module contains the necessary functions to process the output string generated by a command.

Functions:
    remove_lines(command_output)
    process_command_output(command, command_output)
    process_auto_output(command_output)
    process_autopwn_output(command_output)
    get_protocol_type(command_output)

"""


import pathlib
import re
import os

from px3_app.utils import file_manager, json_processor, ansi_processor
from px3_app.globals import SAVED_MF_TAGS_DIRECTORY_PATH


def remove_lines(command_output: str) -> str:
    """Removes lines that end with Carriage Return ('\r') and keeps the lines that end
    with both Carriage Return and Line Feed ('\r\n').

    Args:
        command_output (str): Command output string.

    Returns:
        mod_command_output (str): Modified string.

    """

    raw_lines = re.split("\r\n", command_output)
    lines = [re.split("\r", line)[-1] for line in raw_lines]
    mod_command_output = "\n".join(lines[1:-1])
    return mod_command_output


def process_command_output(command: str, command_output: str) -> str:
    """Removes and replaces unwanted characters in the output string of a proxmark_client command and
    converts it into HTML code.

     Args:
         command (str): Command executed
         command_output (str): The output string of the proxmark_client command.

    Returns:
        mod_command_output (str): String containing the HTML code of the modified command output string.

    """

    if command == "auto":
        command_output = process_auto_output(command_output)
    elif command == "hf mf autopwn":
        command_output = process_autopwn_output(command_output)

    command_output = f"\x1b[33mCommand\x1b[0m: {command}\n\n" + remove_lines(command_output)
    mod_command_output = ansi_processor.ansi_to_html(command_output)

    return mod_command_output


def process_auto_output(command_output: str) -> str:
    """Checks if a pm3 file has been created after running the 'auto' command and deletes it.

    Args:
        command_output (str): Output string of the auto command.

    Returns:
        mod_command_output (str): Modified command output string.

    """

    mod_command_output = command_output
    pm3_file_found = re.search(r'lf_unknown.*\.pm3', command_output)

    if pm3_file_found:
        filename = pm3_file_found.group()
        pat1 = re.escape('[\x1b[32m+\x1b[0m] saved \x1b[33m40000\x1b[0m bytes to PM3 file \x1b[33m')
        pat2 = re.escape('\x1b[0m\r')
        pattern = pat1 + f"'{filename}'" + pat2
        mod_command_output = re.sub(pattern, "", command_output)
        try:
            os.remove(filename)
        except OSError:
            pass

    return mod_command_output


def process_autopwn_output(command_output: str) -> str:
    """Checks the names of the created mf_tags by the 'autopwn' command and moves them to the mf_tags folder.

    Args:
        command_output (str): Output string of the autopwn command.

    Returns:
        mod_command_output (str): Modified command output string.

    """

    mod_command_output = command_output
    if re.search(r'hf-mf-', command_output):
        filenames = []
        keys_filename = re.search(r'hf-mf-[^\r]*-key[^\r]*\.bin', command_output).group()
        filenames.append(keys_filename)
        binary_filename = re.search(r'hf-mf-[^\r]*-dump[^\r]*\.bin', command_output).group()
        filenames.append(binary_filename)
        eml_filename = re.search(r'hf-mf-[^\r]*-dump[^\r]*\.eml', command_output).group()
        filenames.append(eml_filename)
        json_filename = re.search(r'hf-mf-[^\r]*-dump[^\r]*\.json', command_output).group()
        filenames.append(json_filename)

        files = {file: file_manager.rename_and_move_tag_file(
            pathlib.Path(file).absolute(), SAVED_MF_TAGS_DIRECTORY_PATH) for file in filenames}

        json_processor.add_date_time_to_json_file(files[json_filename])

        for k, v in files.items():
            mod_command_output = re.sub(re.escape(k), v.name, mod_command_output)

        mf_tag = json_processor.json_to_mf_tag(files[json_filename])
        mf_tags.append(mf_tag)
        mf_tags.sort(key=lambda x: x.date, reverse=True)

    return mod_command_output


def get_protocol_type(command_output: str):
    """Returns the protocol used by a tag.

    Args:
        command_output (str): String containing the command output.

    Returns:
        protocol (str): Protocol used by the tag.

    """

    pattern = r'Valid ([^\r]+) found'
    valid_tag_found = re.search(pattern, command_output)
    if valid_tag_found:
        protocol = ansi_processor.escape_ansi(valid_tag_found.group(1).strip())
        return protocol


mf_tags = file_manager.get_saved_mf_tags(SAVED_MF_TAGS_DIRECTORY_PATH)
