# -*- coding: utf-8 -*-
"""Processor for the files containing the information of the saved Mifare Classic tags.

Functions:
    add_date_to_filename(file_path, dt)
    get_saved_mf_tags(directory_path)
    rename_and_move_tag_file(filename, new_directory_path)
    delete_tag_files(files)

"""


import datetime
import pathlib

from px3_app.utils import json_processor
from px3_app.globals import SAVED_MF_TAGS_DIRECTORY_PATH


def add_date_to_filename(file_path: pathlib.Path, dt: datetime.datetime = datetime.datetime.now()) -> pathlib.Path:
    """Adds date to the beginning of a filename.

    Args:
        file_path (pathlib.Path): Filename string.
        dt (datetime.datetime): Datetime object.

    Returns:
        new_file_path (pathlib.Path): Filename with current date added to the beginning.

    """

    directory_path = file_path.parent
    filename = str(file_path.name)
    last_character = filename[filename.index(".") - 1]
    if last_character.isnumeric():
        filename = filename[:filename.index(".") - 2] + filename[filename.index("."):]
    dt = datetime.datetime.now()
    formatted_dt = dt.strftime('%Y%m%d-%H%M%S')
    new_filename = f"{formatted_dt}-{filename}"
    new_file_path = file_path.replace(directory_path / new_filename)
    return new_file_path


def get_saved_mf_tags(directory_path: pathlib.PosixPath) -> list:
    """Returns the saved Mifare1k tags in the 'mf_tags' directory.

    Args:
        directory_path (pathlib.PosixPath): Directory path.

    Returns:
        tags_list (list): List containing the saved Mifare1k tags.

    """

    if not directory_path.exists():
        directory_path.mkdir(parents=True, exist_ok=True)

    tags_list = [json_processor.json_to_mf_tag(file) for file in directory_path.iterdir()
                 if file.name.endswith(".json")]

    tags_list.sort(key=lambda x: x.date, reverse=True)

    return tags_list


def rename_and_move_tag_file(file_path: pathlib.Path, new_directory_path: pathlib.Path) -> pathlib.Path:
    """Renames a file generated by the autopwn command and moves it to the mf_tags directory.

    Args:
        file_path (pathlib.Path): Filename string.
        new_directory_path (pathlib.PosixPath): Directory path.

    Returns:
        new_file_path (pathlib.Path): Modified file path.

    """

    new_filename = add_date_to_filename(file_path)
    new_file_path = new_filename.replace(new_directory_path / new_filename.name)
    return new_file_path


def delete_tag_files(files: dict):
    """Deletes the files of a Mifare1k saved tag.

    Args:
        files (dict): Dictionary containing the filenames.

    """

    for file in files.values():
        file.unlink(missing_ok=True)
